name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_monitor
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          cd backend
          poetry install --no-interaction --no-ansi

      - name: Run tests
        run: |
          cd backend
          poetry run python manage.py test

      - name: Run linting
        run: |
          cd backend
          poetry run ruff check . || true
          poetry run black --check . || true
          poetry run isort --check-only . || true

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Run linting
        run: |
          cd frontend
          pnpm run type-check

      - name: Run tests
        run: |
          cd frontend
          pnpm run test:ci

      - name: Build
        run: |
          cd frontend
          pnpm run build

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Run E2E tests
        run: |
          cd frontend
          pnpm run cypress:run || true

      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -f backend/Dockerfile.prod -t home-hub-monitor-backend:latest .
          docker build -f frontend/Dockerfile.prod -t home-hub-monitor-frontend:latest .

          # Push to registry (configure with your registry)
          # docker tag home-hub-monitor-backend:latest your-registry/home-hub-monitor-backend:latest
          # docker tag home-hub-monitor-frontend:latest your-registry/home-hub-monitor-frontend:latest
          # docker push your-registry/home-hub-monitor-backend:latest
          # docker push your-registry/home-hub-monitor-frontend:latest
